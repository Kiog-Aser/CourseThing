generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole           @default(USER)
  accounts          Account[]
  courses           Course[]           @relation("CourseAuthor")
  lessons           Lesson[]           @relation("LessonAuthor")
  lessonCompletions LessonCompletion[]
  posts             Post[]
  sessions          Session[]
}

model Course {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  language    String   @default("general")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation("CourseAuthor", fields: [authorId], references: [id])
  lessons     Lesson[]

  @@index([slug])
}

model Lesson {
  id                String             @id @default(cuid())
  slug              String
  title             String
  kind              LessonKind
  status            LessonStatus       @default(DRAFT)
  content           String?
  contentJson       String?
  youtubeId         String?
  order             Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  courseId          String
  authorId          String
  description       String?
  author            User               @relation("LessonAuthor", fields: [authorId], references: [id])
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  @@unique([courseId, slug])
  @@index([courseId, order])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LessonCompletion {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime @default(now())
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

enum UserRole {
  USER
  ADMIN
}

enum LessonKind {
  VIDEO
  TEXT
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
