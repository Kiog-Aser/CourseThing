// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// -----------------------------------------------------------------------------
// Migration Notes (Course.language, Lesson.status, Lesson.contentJson)
// 1. Create & apply local migration:
//    npx prisma migrate dev --name add_course_language_and_lesson_status
// 2. For production deploy after committing migration:
//    npx prisma migrate deploy
// 3. Backfill existing rows if you had prior data (run in SQL console):
//    UPDATE "Course" SET "language"='general' WHERE "language" IS NULL;
//    UPDATE "Lesson" SET "status"='DRAFT' WHERE "status" IS NULL;
// 4. contentJson is optional; keep NULL until the rich editor stores structured JSON.
// 5. If you manually edited schema without migration yet and only want to sync (dev only):
//    npx prisma db push   (avoid for prod data changes; prefer migrate dev)
// -----------------------------------------------------------------------------

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          UserRole  @default(USER)
    courses       Course[]  @relation("CourseAuthor")
    lessons       Lesson[]  @relation("LessonAuthor")
    lessonCompletions LessonCompletion[]
}

// Simple role enum
enum UserRole {
    USER
    ADMIN
}

model Course {
    id          String   @id @default(cuid())
    slug        String   @unique
    title       String
    language    String   @default("general")
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    author      User     @relation("CourseAuthor", fields: [authorId], references: [id])
    authorId    String
    lessons     Lesson[]

    @@index([slug])
}

model Lesson {
    id          String   @id @default(cuid())
    slug        String
    title       String
    description String? // New: lesson description
    kind        LessonKind
    status      LessonStatus @default(DRAFT)
    content     String?
    contentJson String?
    youtubeId   String?
    order       Int       @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
    author      User      @relation("LessonAuthor", fields: [authorId], references: [id])
    authorId    String
    lessonCompletions LessonCompletion[]

    @@unique([courseId, slug])
    @@index([courseId, order])
}

enum LessonKind {
    VIDEO
    TEXT
}

enum LessonStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LessonCompletion {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId  String
    completedAt DateTime @default(now())

    @@unique([userId, lessonId])
}
