generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  email                 String?            @unique
  emailVerified         DateTime?
  image                 String?
  role                  UserRole           @default(USER)
  creativeFunCustomer   Boolean?           // Cached CreatiFun customer status
  customerVerifiedAt    DateTime?          // When customer status was last verified
  accounts              Account[]
  courses               Course[]           @relation("CourseAuthor")
  lessons               Lesson[]           @relation("LessonAuthor")
  lessonCompletions     LessonCompletion[]
  posts                 Post[]
  sessions              Session[]
}

model Course {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  language    String    @default("general")
  description String?
  poster      String?   // URL to course poster image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation("CourseAuthor", fields: [authorId], references: [id])
  chapters    Chapter[]
  lessons     Lesson[]  // Legacy: lessons without chapters

  @@index([slug])
}

model Chapter {
  id          String   @id @default(cuid())
  slug        String
  title       String
  description String?
  poster      String?  // URL to chapter poster image
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@unique([courseId, slug])
  @@index([courseId, order])
}

model Lesson {
  id                String             @id @default(cuid())
  slug              String
  title             String
  kind              LessonKind
  status            LessonStatus       @default(DRAFT)
  content           String?
  contentJson       String?
  youtubeId         String?
  order             Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  courseId          String?            // Optional for backward compatibility
  chapterId         String?            // New: lessons can belong to chapters
  authorId          String
  description       String?
  author            User               @relation("LessonAuthor", fields: [authorId], references: [id])
  course            Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter           Chapter?           @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  // Ensure slug is unique within course or chapter context
  @@unique([courseId, slug, chapterId])
  @@index([courseId, order])
  @@index([chapterId, order])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LessonCompletion {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime @default(now())
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

enum UserRole {
  USER
  ADMIN
}

enum LessonKind {
  VIDEO
  TEXT
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
